// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package solubris.mon4roo.core;

import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;
import solubris.mon4roo.core.MonitorMetricDataOnDemand;
import solubris.mon4roo.core.MonitorMetricIntegrationTest;
import solubris.mon4roo.jpa.MonitorMetricRepository;

privileged aspect MonitorMetricIntegrationTest_Roo_IntegrationTest {
    
    declare @type: MonitorMetricIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: MonitorMetricIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: MonitorMetricIntegrationTest: @Transactional;
    
    @Autowired
    MonitorMetricDataOnDemand MonitorMetricIntegrationTest.dod;
    
    @Autowired
    MonitorMetricRepository MonitorMetricIntegrationTest.monitorMetricRepository;
    
    @Test
    public void MonitorMetricIntegrationTest.testCount() {
        Assert.assertNotNull("Data on demand for 'MonitorMetric' failed to initialize correctly", dod.getRandomMonitorMetric());
        long count = monitorMetricRepository.count();
        Assert.assertTrue("Counter for 'MonitorMetric' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void MonitorMetricIntegrationTest.testFind() {
        MonitorMetric obj = dod.getRandomMonitorMetric();
        Assert.assertNotNull("Data on demand for 'MonitorMetric' failed to initialize correctly", obj);
        String id = obj.getName();
        Assert.assertNotNull("Data on demand for 'MonitorMetric' failed to provide an identifier", id);
        obj = monitorMetricRepository.findOne(id);
        Assert.assertNotNull("Find method for 'MonitorMetric' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'MonitorMetric' returned the incorrect identifier", id, obj.getName());
    }
    
    @Test
    public void MonitorMetricIntegrationTest.testFindAll() {
        Assert.assertNotNull("Data on demand for 'MonitorMetric' failed to initialize correctly", dod.getRandomMonitorMetric());
        long count = monitorMetricRepository.count();
        Assert.assertTrue("Too expensive to perform a find all test for 'MonitorMetric', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<MonitorMetric> result = monitorMetricRepository.findAll();
        Assert.assertNotNull("Find all method for 'MonitorMetric' illegally returned null", result);
        Assert.assertTrue("Find all method for 'MonitorMetric' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void MonitorMetricIntegrationTest.testFindEntries() {
        Assert.assertNotNull("Data on demand for 'MonitorMetric' failed to initialize correctly", dod.getRandomMonitorMetric());
        long count = monitorMetricRepository.count();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<MonitorMetric> result = monitorMetricRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / maxResults, maxResults)).getContent();
        Assert.assertNotNull("Find entries method for 'MonitorMetric' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'MonitorMetric' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void MonitorMetricIntegrationTest.testDelete() {
        MonitorMetric obj = dod.getRandomMonitorMetric();
        Assert.assertNotNull("Data on demand for 'MonitorMetric' failed to initialize correctly", obj);
        String id = obj.getName();
        Assert.assertNotNull("Data on demand for 'MonitorMetric' failed to provide an identifier", id);
        obj = monitorMetricRepository.findOne(id);
        monitorMetricRepository.delete(obj);
        monitorMetricRepository.flush();
        Assert.assertNull("Failed to remove 'MonitorMetric' with identifier '" + id + "'", monitorMetricRepository.findOne(id));
    }
    
}
